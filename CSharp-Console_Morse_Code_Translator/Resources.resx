<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error" xml:space="preserve">
    <value>
d88888b d8888b. d8888b.  .d88b.  d8888b.
88'     88  `8D 88  `8D .8P  Y8. 88  `8D
88ooooo 88oobY' 88oobY' 88    88 88oobY'
88~~~~~ 88`8b   88`8b   88    88 88`8b
88.     88 `88. 88 `88. `8b  d8' 88 `88.
Y88888P 88   YD 88   YD  `Y88P'  88   YD
</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>
db       .d88b.   .d8b.  d8888b. d888888b d8b   db  d888b
88      .8P  Y8. d8' `8b 88  `8D   `88'   888o  88 88' Y8b
88      88    88 88ooo88 88   88    88    88V8o 88 88
88      88    88 88~~~88 88   88    88    88 V8o88 88  ooo
88booo. `8b  d8' 88   88 88  .8D   .88.   88  V888 88. ~8~
Y88888P  `Y88P'  YP   YP Y8888D' Y888888P VP   V8P  Y888P
</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>
.88b  d88. d88888b d8b   db db    db
88'YbdP`88 88'     888o  88 88    88
88  88  88 88ooooo 88V8o 88 88    88
88  88  88 88~~~~~ 88 V8o88 88    88
88  88  88 88.     88  V888 88b  d88
YP  YP  YP Y88888P VP   V8P ~Y8888P'
</value>
  </data>
  <data name="Morse" xml:space="preserve">
    <value>
.88b  d88.  .d88b.  d8888b. .d8888. d88888b
88'YbdP`88 .8P  Y8. 88  `8D 88'  YP 88'
88  88  88 88    88 88oobY' `8bo.   88ooooo
88  88  88 88    88 88`8b     `Y8b. 88~~~~~
88  88  88 `8b  d8' 88 `88. db   8D 88.
YP  YP  YP  `Y88P'  88   YD `8888Y' Y88888P
</value>
  </data>
  <data name="Result" xml:space="preserve">
    <value>
d8888b. d88888b .d8888. db    db db      d888888b
88  `8D 88'     88'  YP 88    88 88      `~~88~~'
88oobY' 88ooooo `8bo.   88    88 88         88
88`8b   88~~~~~   `Y8b. 88    88 88         88
88 `88. 88.     db   8D 88b  d88 88booo.    88
88   YD Y88888P `8888Y' ~Y8888P' Y88888P    YP
</value>
  </data>
  <data name="TxtInput" xml:space="preserve">
    <value>
d888888b db    db d888888b
`~~88~~' `8b  d8' `~~88~~'
   88     `8bd8'     88
   88     .dPYb.     88
   88    .8P  Y8.    88
   YP    YP    YP    YP

d888888b d8b   db d8888b. db    db d888888b
  `88'   888o  88 88  `8D 88    88 `~~88~~'
   88    88V8o 88 88oodD' 88    88    88
   88    88 V8o88 88~~~   88    88    88
  .88.   88  V888 88      88b  d88    88
Y888888P VP   V8P 88      ~Y8888P'    YP
</value>
  </data>
  <data name="UserInput" xml:space="preserve">
    <value>
db    db .d8888. d88888b d8888b.
88    88 88'  YP 88'     88  `8D
88    88 `8bo.   88ooooo 88oobY'
88    88   `Y8b. 88~~~~~ 88`8b
88b  d88 db   8D 88.     88 `88.
~Y8888P' `8888Y' Y88888P 88   YD

d888888b d8b   db d8888b. db    db d888888b
  `88'   888o  88 88  `8D 88    88 `~~88~~'
   88    88V8o 88 88oodD' 88    88    88
   88    88 V8o88 88~~~   88    88    88
  .88.   88  V888 88      88b  d88    88
Y888888P VP   V8P 88      ~Y8888P'    YP
</value>
  </data>
</root>